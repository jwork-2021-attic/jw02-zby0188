@startuml

interface Sorter {
    + load(int[] elements)
    + sort()
    + getPlan()
}

class BubbleSorter{
    - int[] a
    + load(int[] a)
    - swap(int i, int j)
    - String plan
    + sort()
    + getPlan()
}

class Geezer{
    {static} - Geezer theGeezer
    {static} + getTheGeezer()
    - Geezer()
    - Sorter sort
    + setSort(Sorter sort)
    + lineup(Line line)
    - parsePlan(String plan)
    - execute(String step)
}

interface Linable{
    + setPosition(Position position)
    + getPosition()
    + getValue()
}

enum Gourd{
    ONE
    TWO
    THREE
    FOUR
    FIVE
    SIX
    SEVEN
    - int r 
    - int g 
    - int b 
    - Position position 
    ~ Gourd(int r, int g, int b)
    {static} + getGourdByRank(int rank)
    + rank()
    + toString()
    + setPosition(Position position)
    + getPosition()
    + swapPosition(Gourd another)
    + getValue()
}

class Line{
    + Line(int length)
    - Position[] positions
    + put(Linable linable, int i)
    + get(int i)
    + toString()
    + toArray()
}

class Position{
    - Linable linable
    ~ Position(Lineable linable)
    + setLinable(Linale linale)
}

class BubbleSorter implements Sorter 
enum Gourd implements Linable 
Gourd o-- Position
Geezer *-- Sorter
Line o-- Position
Line +-- Position
Position o-- Linable

@enduml
